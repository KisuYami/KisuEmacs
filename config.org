#+title: KisuEmacs
[[./img/kisuemacs.png]]

* Install
Just run:
#+begin_example
git https://github.com/KisuYami/KisuEmacs.git ~/.emacs.d/
#+end_example
** Dependencies
You may need:
- notmuch
- mbsync
* Visual
** Theme
A confy theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init
    :hook (after-init . doom-modeline-mode))

  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode))
#+END_SRC
** Overall
Remove everything that reminds me of a GUI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Scroll before cursor hits the end
  (setq scroll-margin 3
        scroll-conservatively 9999
        scroll-step 1)

  ;; Show line numbers
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  (display-line-numbers-update-width)

  ;; Highlight cursor
  (global-hl-line-mode 1)

  ;; Set font
  (add-to-list 'default-frame-alist '(font . "Hack-13" ))
#+END_SRC
** Startup
Dash as startup page
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1))

  (use-package page-break-lines
    :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
    (setq dashboard-banner-logo-title "Welcome to the dark side")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)
                            (agenda . 5))))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode)
    (diminish 'projectile-mode)
    (diminish 'rainbow-mode))
#+END_SRC
* General
** General
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode t)
  (setq tab-width 4) ; or any other preferred value
  (defvaralias 'c-basic-offset 'tab-width)

  ;; Local LISP
  (add-to-list 'load-path "~/.emacs.d/lisp/")

  ;; Ask
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Ring
  (setq ring-bell-function 'ignore)

  (defvar my-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-shell)))
  (ad-activate 'ansi-term)

  ;; Disable backup
  (setq backup-inhibited t)

  ;; Disable auto save
  (setq auto-save-default nil)
#+END_SRC
** Modes
*** Org
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))

  (setq org-todo-keywords
        '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

                                          ;(use-package org-bullets
                                          ;:ensure t
                                          ;:config
                                          ;(add-hook 'org-mode-hook(lambda () (org-bullets-mode))))
#+END_SRC
*** Org Export
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
*** C
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
        c-basic-offset 4)

  (setq-default c-basic-offset 4)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun brian-compile-finish (buffer outstr)
    (unless (string-match "finished" outstr)
      (switch-to-buffer-other-window buffer))
    t)

  (setq compilation-finish-functions 'brian-compile-finish)

  (require 'cl)

  (defadvice compilation-start
      (around inhibit-display
              (command &optional mode name-function highlight-regexp))
    (if (not (string-match "^\\(find\\|grep\\)" command))
        (cl-flet ((display-buffer)
                  (set-window-point)
                  (goto-char))
          (fset 'display-buffer 'ignore)
          (fset 'goto-char 'ignore)
          (fset 'set-window-point 'ignore)
          (save-window-excursion
            ad-do-it))
      ad-do-it))

  (ad-activate 'compilation-start)
#+END_SRC

Themes, modeline, syntax hightlight and more

* Window
** I-DO
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("programming" (or
                                 (mode . css-mode)
                                 (mode . html-mode)
                                 (mode . markdown-mode)
                                 (mode . org-mode)
                                 (mode . asm-mode)
                                 (mode . c-mode)
                                 (mode . prog-mode)))
                 ("planner" (or
                             (name . "^\\**Calendar\\**$")
                             (name . "^diary$")
                             (mode . muse-mode)))
                 ("emacs" (or
                           (name . "^\\**dashboard\\**$")
                           (name . "^\\**scratch\\**$")
                           (name . "^\\**Messages\\**$")
                           (name . "^\\**elfeed-log\\**$")))
                 ("feeds" (or
                           (mode . message-mode)
                           (mode . bbdb-mode)
                           (mode . mail-mode)
                           (mode . gnus-group-mode)
                           (mode . gnus-summary-mode)
                           (mode . gnus-article-mode)
                           (mode . elfeed-search-mode)
                           (mode . notmuch-hello-mode)
                           (mode . notmuch-search-mode)
                           (mode . notmuch-message-mode)
                           (mode . notmuch-show-mode)
                           (name . "^\\.bbdb$")
                           (name . "^\\.newsrc-dribble")))))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

** Swith Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] . switch-window))

  (global-subword-mode 1)
#+END_SRC
* Package
** Overall
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))

  (use-package sudo-edit
    :ensure t)

  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode t))

  (use-package weechat
    :ensure t)

  ;; Email
  (use-package notmuch
    :ensure t
    :config
    (autoload 'notmuch "notmuch" "notmuch mail" t))

  ;; RSS
  (use-package elfeed
    :ensure t)

  (use-package elfeed-org
    :ensure t
    :init (elfeed-org)
    :config
    (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))

  (eval-after-load 'evil
    '(progn
       (evil-make-overriding-map elfeed-search-mode-map 'normal)
       (evil-make-overriding-map elfeed-show-mode-map 'normal)
       (add-hook 'elfeed-show-mode-hook 'evil-normalize-keymaps)
       (add-hook 'elfeed-entry-mode-hook 'evil-normalize-keymaps)))

  (use-package helpful
    :ensure t)

  ;; Instead of normal M-x
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))

  (defun c/lisp-pair-mode ()
    (if (derived-mode-p 'c-mode)
        (setq electric-pair-pairs '(
                                    (?\( . ?\))
                                    (?\[ . ?\])
                                    (?\{ . ?\})
                                    (?\" . ?\")
                                    (?\' . ?\')
                                    ))
      (setq electric-pair-pairs '((?\( . ?\))))))

  (add-hook 'c-mode #'c/lisp-pair-mode)
  (electric-pair-mode t)

  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  (use-package elcord
    :ensure t)
#+END_SRC
** Evil
I'm evil, yes i am
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))

  (setq evil-emacs-state-modes nil)
  (setq evil-insert-state-modes nil)
  (setq evil-motion-state-modes nil)
  (setq evil-move-cursor-back nil)

  (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                                                  (interactive)
                                                  (evil-scroll-up nil)))

  (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                                                  (interactive)
                                                  (evil-scroll-down nil)))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  ;;anoying window-p nil
  ;;(use-package magit
  ;;:ensure t)

  ;;(eval-after-load 'magit
  ;;'(evil-set-initial-state 'magit-popup-mode 'emacs))

  ;;(use-package evil-magit
  ;;:ensure t)
#+END_SRC
* Auto Completion
Keep good company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-lenght 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") 'nil)
    (define-key company-active-map (kbd "M-p") 'nil)
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))


  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (require 'yasnippet)
  (yas-global-mode 1)

  (use-package eldoc
    :ensure t
    :diminish eldoc-mode
    :init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
#+END_SRC
* Keybinds
Lazyness
#+BEGIN_SRC emacs-lisp
  ;; TODO: use use-package
  (require 'custom-binds)
  (require 'general)

  ;; Unbind Everything
  (dolist (key '("\C-a" "\C-b" "\C-c" "\C-d" "\C-e" "\C-f" "\C-g"
                 "\C-h" "\C-k" "\C-l" "\C-n" "\C-o" "\C-p" "\C-q"
                 "\C-t" "\C-u" "\C-v" "\C-x" "\C-z" "\e"))
    (global-unset-key key))

  (global-set-key (kbd "s-d") 'dmenu)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-=") 'text-scale-increase)
  (global-set-key (kbd "M--") 'text-scale-decrease)

  (general-define-key
   :states '(normal emacs)
   :prefix "SPC"
   :non-normal-prefix "C-SPC"

   ;; simple command
   "RET" 'eshell
   "xx" 'smex

   ;; Config
   "cr" 'config-reload
   "ce" 'config-visit
   "cf" 'indent-buffer

   ;; Files
   "f"  'ido-find-file
   "F"  'dired
   "se" 'sudo-edit

   ;; Buffers
   "k"  'kill-current-buffer
   "K"  'kill-all-buffers
   "b"  'ido-switch-buffer
   "xb" 'ibuffer

   ;; Windows
   "wo" 'switch-window

   "wv" 'split-and-fallow-v
   "wh" 'split-and-fallow-h

   "wk" 'delete-window
   "wd" 'delete-other-windows

   ;; Programming
   "'"  'org-edit-special
   "\"" 'org-edit-src-exit
   "e" 'eval-last-sexp
   "\\" 'swiper

   "cp" 'org-latex-export-to-pdf

   "cc" 'projectile-compile-project
   ;"gg" 'magit-status

   ;; Org
   "oa" 'org-agenda
   "o[" 'org-agenda-file-to-front
   "o]" 'org-remove-file
   "o." 'org-agenda-time-stamp
   "oc." 'org-time-stamp
   "od" 'org-deadline
   "os" 'org-schedule

   ;; RSS & Mail
   "mm" 'notmuch
   "md" 'notmuch-delete-tagged
   "mn" 'elfeed-open

   ;; Help
   "hk" 'helpful-key
   "hf" 'helpful-function
   "hx" 'describe-mode


   "hy" 'yas-describe-tables
   )
#+END_SRC
