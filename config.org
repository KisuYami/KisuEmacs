#+title: KisuEmacs
moved to https://gitlab.com/KisuYami/KisuEmacs
[[./img/kisuemacs.png]]
* Visual
Themes, modeline, syntax hightlight and more
** GUI
Remove everything that reminds me of a GUI
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Fullscreen at startup
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
** Theme
A confy theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (setq doom-themes-enable-bold t	  ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-org-config))
#+END_SRC
** Scroll
Scroll before cursor hits the end
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 3
	scroll-conservatively 9999
	scroll-step 1)
#+END_SRC
** Cursor
Highlight the cursor, because i'm blind, i guess
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** Modeline
All modeline sucks, at last this looks good
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init
    :hook (after-init . doom-modeline-mode))
#+END_SRC
** Line Number
Show relative line numbers
#+BEGIN_SRC emacs-lisp
  (defun rcs/line-numbers ()
    "Enable and define the configuration for line numbers."
    (interactive)
    (progn
      (require 'display-line-numbers)
      (setq display-line-numbers-type 'relative)
      (display-line-numbers-update-width)
      (display-line-numbers-mode 1)))

  (add-hook 'prog-mode-hook #'rcs/line-numbers)
#+END_SRC
* Editing
** Lisp
Usefull functions that are plain simple to understand
*** Create Tags
#+BEGIN_SRC emacs-lisp
  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (eshell-command
     (format "find %s -type f -name \"*.[ch]\" | etags -" dir-name)))
#+END_SRC
*** Evil Maps
#+BEGIN_SRC emacs-lisp
  (defun rcs/fix-evil-keymap (keymap hook)
    "Make an default keymap compatyble with evil"
    (eval-after-load 'evil
      '(progn
	 (evil-make-overriding-map keymap 'normal)
	 (add-hook 'hook 'evil-normalize-keymaps))))
#+END_SRC
*** Indent Buffer
#+BEGIN_SRC emacs-lisp
  (defun indent-buffer ()
    "Indent an entire buffer using the default intenting scheme."
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max))
      (tabify (point-min) (point-max)))
    )
#+END_SRC
*** Kill Buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))

  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+END_SRC
*** Split Windows
#+BEGIN_SRC emacs-lisp
  (defun split-and-fallow-h ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))

  (defun split-and-fallow-v ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC
** Pairs
#+BEGIN_SRC emacs-lisp
  (defun rcs/electric-pairs-c ()
    (setq electric-pair-pairs '((?\( . ?\))
				(?\[ . ?\])
				(?\{ . ?\})
				(?\" . ?\")
				(?\' . ?\')))
    (electric-pair-local-mode))

  (add-hook 'c-mode-hook #'rcs/electric-pairs-c)
#+END_SRC
** Commands
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq ring-bell-function 'ignore)

  ;; Instead of the default M-x
  (use-package smex
    :ensure t
    :init (smex-initialize))

  ;; Show options for commands
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))

  ;; Edit previlegied files
  (use-package sudo-edit
    :ensure t)
#+END_SRC
** Keyboard
*** Evil
Am I evil? Yes, I am!
#+BEGIN_SRC emacs-lisp
  ;; Fix tab on terminal
  (setq evil-want-C-i-jump nil)

  (use-package evil
    :ensure t
    :init (evil-mode 1)
    :config
    (setq evil-emacs-state-modes nil)
    (setq evil-insert-state-modes nil)
    (setq evil-motion-state-modes nil)
    (setq evil-move-cursor-back nil))

  (rcs/fix-evil-keymap help-mode-map help-mode-hook)
  (rcs/fix-evil-keymap calendar-mode-map calendar-mode-hook)
#+END_SRC
*** Keymaps
Keybinds that shold be used trough all the modes.
The default leader key is =space= for all the keybinds trough my config
**** Emacs
Removing all the default emacs keybinds
#+BEGIN_SRC emacs-lisp
  ;; Unbind Everything
  (dolist (key '("\C-a" "\C-b" "\C-c" "\C-d" "\C-e" "\C-f" "\C-g" "\C-h" "\C-k"
		 "\C-l" "\C-n" "\C-o" "\C-p" "\C-q" "\C-t" "\C-u" "\C-v" "\C-x"
		 "\C-z" "\e")) (global-unset-key key))
#+END_SRC
**** KEmacs
The master set of keybinds
#+BEGIN_SRC emacs-lisp
  (cua-mode 1)

  (use-package general
    :ensure t)

  (defconst rcs/key-leader "SPC")

  (global-set-key (kbd "M-x") #'smex)
  (evil-define-key nil evil-normal-state-map ";" #'evil-ex)

  (general-define-key
   :states '(normal emacs)
   :prefix rcs/key-leader
   :non-normal-prefix "C-SPC"

   ;; Config
   "cr" '(lambda () (interactive) (org-babel-load-file (expand-file-name "config.org" user-emacs-directory)))
   "ce" '(lambda () (interactive) (find-file (expand-file-name "config.org" user-emacs-directory)))
   "cf" #'indent-buffer

   ;; Files
   "su" #'sudo-edit
   "f"	#'ido-find-file
   "F"	#'dired

   ;; Buffers
   "k"	#'kill-current-buffer
   "b"	#'ido-switch-buffer
   "xk" #'kill-all-buffers
   "xb" #'ibuffer

   ;; Windows
   "wo" #'switch-window

   "wv" #'split-and-fallow-v
   "wh" #'split-and-fallow-h

   "wk" #'delete-window
   "wd" #'delete-other-windows

   ;; Help
   "hx" #'describe-mode
   "hk" #'helpful-key
   "hv" #'helpful-variable
   "hf" #'helpful-function
   "hy" #'yas-describe-tables
   )
#+END_SRC
** Navigation
*** Copy/Paste
#+BEGIN_SRC emacs-lisp
  ;; after copy Ctrl+c in Linux X11, you can paste by `yank' in emacs
  (setq select-enable-clipboard t)

  ;; after mouse selection in X11, you can paste by `yank' in emacs
  (setq select-enable-primary t)
#+END_SRC
*** I-DO
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)

  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))

  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
*** Swith Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :bind ([remap other-window] . switch-window)
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2))
#+END_SRC
*** Hungry Delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :bind (("<backspace>" . hungry-delete-backward)
	   ("<delete>" . hungry-delete-forward))
    :config (global-hungry-delete-mode))
#+END_SRC
** Startup Page
Dash as startup page
*** Start Page
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-mode +1)
    (setq projectile-project-search-path '("~/Dev/Software"))
    (setq projectile-enable-caching t))

  (use-package page-break-lines
    :ensure t)

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner (expand-file-name "img/dashLogo.png" user-emacs-directory))
    (setq dashboard-banner-logo-title "Welcome to the dark side")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((agenda . 5)
			    (recents  . 5)
			    (projects . 15))))
#+END_SRC
*** Keybinds
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states '(normal emacs)
   :keymaps 'dashboard-mode-map
   :prefix rcs/key-leader
   :non-normal-prefix "C-SPC"

   ;; Agenda
   "Aa" #'org-agenda
   "Am" #'calendar
   "Ad" #'diary
   )
#+END_SRC
** Encoding/Fonts
#+BEGIN_SRC emacs-lisp
  ;; UTF-8
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  ;; Set font
  (add-to-list 'default-frame-alist '(font . "Hack-11" ))
#+END_SRC
** Backup/Autosave
#+BEGIN_SRC emacs-lisp
  (if (not (file-exists-p "~/.local/share/emacs/backups/"))
      (make-directory "~/.local/share/emacs/backups/" t))

  (setq backup-directory-alist `(("." . "~/.local/share/emacs/backups/")))
  (setq make-backup-files t		; backup of a file the first time it is saved.
	backup-by-copying t		; don't clobber symlinks
	version-control t			; version numbers for backup files
	delete-old-versions t		; delete excess backup files silently
	delete-by-moving-to-trash t
	kept-old-versions 6		; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9		; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t		; auto-save every buffer that visits a file
	auto-save-timeout 20		; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200		; number of keystrokes between auto-saves (default: 300)
	)

  ;; Auto-save
  (if (not (file-exists-p "~/.local/share/emacs/autosaves/"))
      (make-directory "~/.local/share/emacs/autosaves/" t))
  (setq auto-save-file-name-transforms
	`((".*" "~/.local/share/emacs/autosaves/" t)))
#+END_SRC
* Programming
** Info
*** Git
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :ensure t
    :init (global-git-gutter+-mode +1))


  (use-package git-gutter-fringe+
    :ensure t
    :config
    (setq-default fringes-outside-margins t)
    (setq-default left-fringe-width	 3)
    (setq-default right-fringe-width 0)
    (setq git-gutter+-fringe-string (format "%s" (make-list 17 "XXXXXX\n")))

    (fringe-helper-define 'git-gutter-fr+-added nil git-gutter+-fringe-string)
    (fringe-helper-define 'git-gutter-fr+-deleted nil git-gutter+-fringe-string)
    (fringe-helper-define 'git-gutter-fr+-modified nil git-gutter+-fringe-string))
#+END_SRC
*** Docs
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :ensure t
    :config
    (rcs/fix-evil-keymap helpful-mode-map helpful-mode-hook))

  ;; Fix Man-mode keymaps
  (eval-after-load 'Man
    '(progn
       (rcs/fix-evil-keymap Man-mode-map Man-mode-hook)
       (define-key Man-mode-map (kbd "k") nil)
       ))
#+END_SRC
*** Pop Man
#+BEGIN_SRC emacs-lisp
  (use-package posframe
    :ensure t)

  (load (expand-file-name "lisp/pop-man/pop-man.el" user-emacs-directory))
#+END_SRC
*** Highlighting
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :ensure t
    :config
    (setq whitespace-line-column 81) ;; limit line length
    (setq whitespace-style '(face lines-tail))

    (add-hook 'prog-mode-hook #'whitespace-mode))

  (use-package hl-todo
    :ensure t
    :config
    (global-hl-todo-mode t))

  ;; turn on highlight matching brackets when cursor is on one
  (show-paren-mode 1)
#+END_SRC
** Modes
*** C
Specific configurations for C programming.
**** Company
Keep good company
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
      (flycheck-clang-analyzer-setup)))

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode))

  (use-package company-c-headers
    :ensure t)

  (use-package company-irony
    :ensure t
    :config
    (setq company-backends '((company-c-headers
			      company-dabbrev-code
			      company-irony))))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC
**** Keybinds
#+BEGIN_SRC emacs-lisp
  (general-def
    :states '(normal)
    :keymaps 'c-mode-map
    :prefix rcs/key-leader
    :non-normal-prefix "C-SPC"
    "cc" #'projectile-compile-project
    "ct" #'create-tags

    "mm" #'pop-man-show-at-point
    "mM" #'pop-man-show-man
    )

  (general-def
    :states '(normal)
    :keymaps 'c-mode-map
    "<f12>" #'recompile
    )
#+END_SRC
**** Compilation
Shows if the compilation succeded or failed in the minibuffer
#+BEGIN_SRC emacs-lisp
  (defun brian-compile-finish (buffer outstr)
    (unless (string-match "finished" outstr)
      (switch-to-buffer-other-window buffer))
    t)

  (setq compilation-finish-functions #'brian-compile-finish)

  (require 'cl-lib)

  (defadvice compilation-start
      (around inhibit-display
	      (command &optional mode name-function highlight-regexp))
    (if (not (string-match "^\\(find\\|grep\\)" command))
	(cl-flet ((display-buffer)
		  (set-window-point)
		  (goto-char))
	  (fset 'display-buffer 'ignore)
	  (fset 'goto-char 'ignore)
	  (fset 'set-window-point 'ignore)
	  (save-window-excursion
	    ad-do-it))
      ad-do-it))

  (ad-activate 'compilation-start)
#+END_SRC
**** Indentation
Tabs are truth
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux")
  (setq-default tab-always-indent t)
  (setq-default indent-tabs-mode t)
  (setq-default c-basic-offset 8)
  (setq-default tab-width 8)
#+END_SRC
*** Org
**** Geral
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-export-with-smart-quotes t)
  (add-hook 'org-mode-hook #'org-indent-mode)

  (setq org-todo-keywords
	'((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))
#+END_SRC
**** Babel
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (latex . t)
     (C . t)
     (shell . t)))
#+END_SRC
**** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Documents/Org/Agenda.org")))

  (setq view-diary-entries-initially t
	mark-diary-entries-in-calendar t
	number-of-diary-entries 7)
  (add-hook 'today-visible-calendar-hook #'calendar-mark-today)
#+END_SRC
**** Exports
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)

  ;; Fix citations
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	  "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
**** Snippets
#+BEGIN_SRC emacs-lisp
 (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")) 
#+END_SRC
**** Keybinds
#+BEGIN_SRC emacs-lisp
  (general-define-key
   :states '(normal)
   :keymaps 'org-mode-map
   :prefix rcs/key-leader
   :non-normal-prefix "C-SPC"
   "e"	#'eval-last-sexp

   "E" #'org-babel-execute-src-block
   "oa" #'org-agenda
   "oe" #'org-export-dispatch
   "op" #'org-latex-export-to-pdf
   "o[" #'org-agenda-file-to-front
   "o]" #'org-remove-file
   "oc." #'org-time-stamp
   "od" #'org-deadline
   "os" #'org-schedule
   "'" #'org-edit-special
   )

  (general-define-key
   :states '(normal)
   :keymaps '(emacs-lisp-mode-map lisp-interaction-mode-map)
   :prefix rcs/key-leader
   :non-normal-prefix "C-SPC"

   "e"	#'eval-last-sexp
   "'" #'org-edit-src-exit
   )
#+END_SRC
*** Lisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'yas-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'company-mode)

  (use-package slime
    :ensure t
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl")
    (setq slime-contribs '(slime-fancy)))

  (use-package slime-company
    :ensure t
    :init
    (require 'company)
    (slime-setup '(slime-fancy slime-company)))
#+END_SRC
** Snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode t)
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
