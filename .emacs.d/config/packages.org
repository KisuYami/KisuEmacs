#+TITLE: Packages

* Auto Completion
Keep good company
#+BEGIN_SRC emacs-lisp
  (use-package company
	  :ensure t
	  :config
	  (add-hook 'after-init-hook 'global-company-mode)
	  (setq company-idle-delay 0)
	  (setq company-minimum-prefix-lenght 3))

  (with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") 'nil)
  (define-key company-active-map (kbd "M-p") 'nil)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))

  (use-package company-irony
  :ensure t
  :config
  (require 'company)
  (add-to-list 'company-backends 'company-irony))

  (use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))


  (with-eval-after-load 'company
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode))
#+END_SRC
* Hungry Delete
  #+BEGIN_SRC emacs-lisp
	(use-package hungry-delete
	  :ensure t
	  :config
	  (global-hungry-delete-mode))
  #+END_SRC
* Vim Keys!!!
   I'm evil, yes i am
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))
#+END_SRC
* Org Export
** twbs
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
	:ensure t)
#+END_SRC
* Sudo Edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
	:ensure t)
#+END_SRC
* Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
	:ensure t
	:config
(use-package yasnippet-snippets
	:ensure t)
	(yas-reload-all))

(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
* Electric
#+BEGIN_SRC emacs-lisp
  (defun c/lisp-pair-mode ()
	(if (derived-mode-p 'c-mode)
		(setq electric-pair-pairs '(
									(?\( . ?\))
									(?\[ . ?\])
									(?\{ . ?\})
									(?\" . ?\")
									(?\' . ?\')
									))
		(setq electric-pair-pairs '((?\( . ?\))))
		))

  (add-hook 'c-mode #'c/lisp-pair-mode)
  (electric-pair-mode t)
#+END_SRC
* Ibuffer
#+BEGIN_SRC emacs-lisp
   (setq ibuffer-saved-filter-groups
		 (quote (("default"
				  ("dired" (mode . dired-mode))
				  ("programming" (or
							  (mode . css-mode)
							  (mode . html-mode)
							  (mode . markdown-mode)
							  (mode . org-mode)
							  (mode . asm-mode)
							  (mode . prog-mode)))
				  ("planner" (or
							  (name . "^\\*Calendar\\*$")
							  (name . "^diary$")
							  (mode . muse-mode)))
				  ("emacs" (or
							(name . "^\\*dashboard\\*$")
							(name . "^\\*scratch\\*$")
							(name . "^\\*Messages\\*$")
							(name . "^\\*elfeed-log\\*$")))
				  ("feeds" (or
						   (mode . message-mode)
						   (mode . bbdb-mode)
						   (mode . mail-mode)
						   (mode . gnus-group-mode)
						   (mode . gnus-summary-mode)
						   (mode . gnus-article-mode)
						   (mode . elfeed-search-mode)
						   (mode . notmuch-hello-mode)
						   (mode . notmuch-search-mode)
						   (mode . notmuch-message-mode)
						   (mode . notmuch-show-mode)
						   (name . "^\\.bbdb$")
						   (name . "^\\.newsrc-dribble")))))))

   (add-hook 'ibuffer-mode-hook
			 (lambda ()
			   (ibuffer-auto-mode 1)
			   (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-expert t)
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC
* Window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] . switch-window))

    (global-subword-mode 1)
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	:ensure t)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
	(use-package magit
		 :ensure t)

	(eval-after-load 'magit
		'(evil-set-initial-state 'magit-popup-mode 'emacs))
#+END_SRC
* Email
#+BEGIN_SRC emacs-lisp
  (use-package notmuch
	:ensure t)

  (autoload 'notmuch "notmuch" "notmuch mail" t)
#+END_SRC
* EMMS
#+BEGIN_SRC emacs-lisp
  (use-package emms
	:ensure t
	:config
	  (require 'emms-setup)
	  (require 'emms-player-mpd)
	  (emms-all) ; don't change this to values you see on stackoverflow questions if you expect emms to work
	  (setq emms-seek-seconds 5)
	  (setq emms-player-list '(emms-player-mpd))
	  (setq emms-info-functions '(emms-info-mpd))
	  (setq emms-player-mpd-server-name "localhost")
	  (setq emms-player-mpd-server-port "6601"))

  (eval-after-load 'emms
	  '(evil-set-initial-state 'emms-mode 'insert))

  (defun emms-setup-mpd ()
	  "Start MPD, connects to it and syncs the metadata cache."
	  (interactive)
	  (emms-player-mpd-connect)
	  (emms-cache-set-from-mpd-all)
	  (message "MPD Started!"))
#+END_SRC
* Help
#+BEGIN_SRC emacs-lisp
(use-package helpful
	:ensure t)
#+END_SRC
* Smex
   #+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
   #+END_SRC
* Org
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook(lambda () (org-bullets-mode))))
   #+END_SRC
* RSS
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
	:ensure t)

  (use-package elfeed-org
	:ensure t
	:config
	(elfeed-org)
	(setq rmh-elfeed-org-files (list "~/.emacs.d/config/elfeed.org")))

  ;; Correct keybinds
  (eval-after-load 'elfeed
	'(progn
		(evil-make-overriding-map elfeed-search-mode-map 'normal)
		(add-hook 'elfeed-search-mode-hook 'evil-normalize-keymaps)))
#+END_SRC
* Web
#+BEGIN_SRC emacs-lisp
  (use-package simple-httpd
	:ensure t)

  (use-package htmlize
	:ensure t)

  (use-package impatient-mode
	:ensure t)

  (defvar a 1 "Setup for live preview")
  (defun preview-toggle ()
	"Toggle Live Prefiew"
	(interactive)
	(cond
	 ((= a 1)
	  (httpd-start)
	  (impatient-mode)
	  (message "Starting Preview")
	  (setq a 2))
	 ((= a 2)
	  (httpd-stop)
	  (impatient-mode)
	  (message "Stopping Preview")
	  (setq a 1))))
#+END_SRC
* WM
** EXWM
#+BEGIN_SRC emacs-lisp
  ;(use-package exwm
	;:ensure t
	;:config
	;(require 'exwm-systemtray)
	;(exwm-systemtray-enable)
	;(require 'exwm-config)
	;(exwm-config-default))
#+END_SRC
** DMenu
#+BEGIN_SRC emacs-lisp
  ;(use-package dmenu
	 ;:ensure t)
#+END_SRC
** Modeline
*** Geral
#+BEGIN_SRC emacs-lisp
;(use-package diminish
  ;:ensure t
  ;:init
  ;(diminish 'which-key-mode)
  ;(diminish 'undo-tree-mode)
  ;(diminish 'subword-mode)
  ;(diminish 'which-key-mode)
  ;(diminish 'projectile-mode)
  ;(diminish 'rainbow-mode))
#+END_SRC
*** Battery
#+BEGIN_SRC emacs-lisp
;(use-package fancy-battery
   ;:ensure t
   ;:config
   ;(add-hook 'after-init-hook #'fancy-battery-mode)
   ;(setq fancy-battery-mode-line
	  ;'(:eval (unless (equal (cdr (assq ?b fancy-battery-last-status)) "+")
					;(fancy-battery-default-mode-line))))
;)
#+END_SRC
*** Clock
#+BEGIN_SRC emacs-lisp
;(defface egoge-display-time
   ;'((((type x w32 mac))
      ;;; #060525 is the background colour of my default face.
      ;(:foreground "#ffffff" :inherit bold))
     ;(((type tty))
      ;(:foreground "white")))
   ;"Face used to display the time in the mode line.")
 ;;; This causes the current time in the mode line to be displayed in
 ;;; `egoge-display-time-face' to make it stand out visually.
 ;(setq display-time-string-forms
       ;'((propertize (concat " " 24-hours ":" minutes " ")
 		    ;'face 'egoge-display-time)))
;
 ;(display-time-mode 1)
#+END_SRC
