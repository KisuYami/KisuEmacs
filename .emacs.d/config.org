#+TITLE:KisuEmacs
#+AUTHOR: Reberti Carvalho Soares
* Visual
** Relative Numbers
#+BEGIN_SRC emacs-lisp
  (setq display-line-numbers 'relative)

  (setq-default display-line-numbers 'visual
	display-line-numbers-widen t
	display-line-numbers-current-absolute t)

  (defun noct:relative ()
    (setq-local display-line-numbers 'visual))

  (defun noct:absolute ()
    (setq-local display-line-numbers t))

  (add-hook 'evil-insert-state-entry-hook #'noct:absolute)
  (add-hook 'evil-insert-state-exit-hook #'noct:relative)
#+END_SRC
** Sintax Demo
#+BEGIN_SRC emacs-lisp
    (use-package eldoc
	:ensure t
	:diminish eldoc-mode
	:init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
#+END_SRC
** Mode Line
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
      
(use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(size-indication-mode 0)
(display-battery-mode 1)
(display-battery-mode 1)
#+END_SRC
** Startup
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :ensure t)

(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC
** Overall
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(global-prettify-symbols-mode t)
#+END_SRC
** Scroll
#+BEGIN_SRC emacs-lisp
    (setq scroll-margin 3
    scroll-conservatively 9999
    scroll-step 1)
#+END_SRC
** Cursor
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-theme 'dracula t)

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
;; may have their own settings.
;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)

;; or for treemacs users
(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC
* Settings
** Sintax Checking
#+BEGIN_SRC emacs-lisp
      (use-package flycheck
	:ensure t
	:config
	(global-flycheck-mode))
#+END_SRC
** Auto Completion
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure t)

(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

(use-package yasnippet
:ensure t
:config
(use-package yasnippet-snippets
:ensure t)
(yas-reload-all))

(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
** Save & Backups
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
(setq ring-bell-function 'ignore)
(setq make-backup-file nil)
(setq auto-save-default nil)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(defvar my-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
(interactive (list my-shell)))
(ad-activate 'ansi-term)
#+END_SRC
** Ask
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Keybindings
** Edit/Reload Config
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Swith Window
#+BEGIN_SRC emacs-lisp
  (defun split-and-fallow-hori ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-fallow-hore)
  (defun split-and-fallow-vert ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-fallow-vert)
#+END_SRC
** Vim Keys!!!
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(defun e-run-command ()
  "DMenu like execute commands"
  (interactive)
  (require 'subr-x) 
  (start-process "RUN" "RUN" (string-trim-right (read-shell-command "$: "))))

(defun st ()
  "Open st terminal"
  (interactive)
  (async-shell-command "st"))

(global-set-key (kbd "s-d") 'e-run-command)
(global-set-key (kbd "<s-return>") 'st)
#+END_SRC
** Buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-g") 'magit-status)
#+END_SRC
* Mode
** Normal
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
(setq tab-width 4) ; or any other preferred value
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] . switch-window))

    (global-subword-mode 1)
#+END_SRC
** I-Do
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** Evil
*** Aways Evil
#+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-modes nil)
  (setq evil-insert-state-modes nil)
  (setq evil-motion-state-modes nil)
#+END_SRC
*** PageDown/Up
    #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                    (interactive)
                    (evil-scroll-up nil)))
    (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                        (interactive)
                        (evil-scroll-down nil)))

    #+END_SRC
*** No insert back
#+BEGIN_SRC emacs-lisp
(setq evil-move-cursor-back nil)
#+END_SRC
** Org
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
	      :ensure t
	      :config
	      (add-hook 'org-mode-hook(lambda () (org-bullets-mode))))
#+END_SRC
** C
#+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
	    c-basic-offset 4)
#+END_SRC
