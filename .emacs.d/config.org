#+TITLE: KisuEmacs
#+AUTHOR: Reberti Carvalho Soares
My Emacs config, don't cringe at this.

* Install
  You will have to install use-package manually then exit emacs, then open emacs, then exit emacs, then open emacs.
after that you may run irony-install-server.
  #+BEGIN_SRC bash
  git clone https://github.com/KisuYami/KisuEmacs
  cp KisuEmacs/.emacs ~/
  cp -r KisuEmacs/.emacs.d ~/
  #+END_SRC

* Modifications
** Sintax Checking
   #+BEGIN_SRC emacs-lisp
    (use-package flycheck
		:ensure t
		:config
		(global-flycheck-mode))
   #+END_SRC
** Auto Completion
   Keep good company
#+BEGIN_SRC emacs-lisp
  (use-package company
      :ensure t
      :config
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-lenght 3))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") 'nil)
    (define-key company-active-map (kbd "M-p") 'nil)
    (define-key company-active-map (kbd "M-n") 'copany-select-next)
    (define-key company-active-map (kbd "M-p") 'copany-select-previous))

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony))

  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))


  (with-eval-after-load 'company
	(add-hook 'c++-mode-hook 'company-mode)
	(add-hook 'c-mode-hook 'company-mode))
   #+END_SRC
** Save & Backups
   #+BEGIN_SRC emacs-lisp
	(setq scroll-conservatively 100)
	(setq ring-bell-function 'ignore)
	(setq make-backup-file nil)
	(setq auto-save-default nil)
   #+END_SRC
** Snippets
   #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
	    :ensure t
	    :config
    (use-package yasnippet-snippets
	    :ensure t)
	    (yas-reload-all))

    (require 'yasnippet)
    (yas-global-mode 1)
   #+END_SRC
** Terminal
   #+BEGIN_SRC emacs-lisp
(defvar my-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
(interactive (list my-shell)))
(ad-activate 'ansi-term)
   #+END_SRC
** Ask
   #+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
* Keybindings
  I don't want to type
** Edit/Reload Config
   #+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
   #+END_SRC
** Swith Window
   #+BEGIN_SRC emacs-lisp
  (defun split-and-fallow-hori ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-fallow-hore)

  (defun split-and-fallow-vert ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-fallow-vert)
   #+END_SRC
** Vim Keys!!!
   I'm evil, yes i am
   #+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init (evil-mode 1))
   #+END_SRC
** Global
   Lazyness
   #+BEGIN_SRC emacs-lisp
	 (global-set-key (kbd "C-x b") 'ibuffer)
	 (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
	 (global-set-key (kbd "C-x y") 'yas-describe-tables)
     (global-set-key (kbd "C-x C-g") 'magit-status)
   #+END_SRC
* Visual
  Themes, modeline, syntax hightlight and more
** Relative Numbers
   Vim like relative numbers
   #+BEGIN_SRC emacs-lisp
  (setq display-line-numbers 'relative)

  (setq-default display-line-numbers 'visual
	display-line-numbers-widen t
	display-line-numbers-current-absolute t)

  (defun noct:relative ()
    (setq-local display-line-numbers 'visual))

  (defun noct:absolute ()
    (setq-local display-line-numbers t))

  (add-hook 'evil-insert-state-entry-hook #'noct:absolute)
  (add-hook 'evil-insert-state-exit-hook #'noct:relative)
   #+END_SRC
** Sintax Demo
   #+BEGIN_SRC emacs-lisp
    (use-package eldoc
	:ensure t
	:diminish eldoc-mode
	:init (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
   #+END_SRC
** Mode Line
   O confy modeline, i would use this in my nvim config
   #+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :init
      :hook (after-init . doom-modeline-mode))
      
(use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode))
   #+END_SRC
** Startup
   Dash as startup page
   #+BEGIN_SRC emacs-lisp
    (use-package projectile
        :ensure t)

     (use-package page-break-lines
       :ensure t)

     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook))

     (setq dashboard-banner-logo-title "Welcome to the dark side")
     (setq dashboard-center-content t)
     (setq dashboard-show-shortcuts nil)
     (setq dashboard-items '((recents  . 5)
			     (projects . 5)
			     (agenda . 5)))
   #+END_SRC
** Overall
   Remove everything that reminds me of a GUI
   #+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)

;; Pretty lambda
(global-prettify-symbols-mode t)
   #+END_SRC
** Scroll
   Scroll buffer before the cursor hit the end
   #+BEGIN_SRC emacs-lisp
    (setq scroll-margin 3
    scroll-conservatively 9999
    scroll-step 1)
   #+END_SRC
** Cursor
   Highlight cursor with a line
   #+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
   #+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "Hack-13" ))
#+END_SRC
** Theme
   A confy theme
   #+BEGIN_SRC emacs-lisp
(use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (doom-themes-org-config))

   #+END_SRC
* Mode
** Normal
   #+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode t)
(setq tab-width 4) ; or any other preferred value
(defvaralias 'c-basic-offset 'tab-width)
(defvaralias 'cperl-indent-level 'tab-width)

  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))

  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    :bind
    ([remap other-window] . switch-window))

    (global-subword-mode 1)
   #+END_SRC
** I-Do
   #+BEGIN_SRC emacs-lisp
  (setq ido-enable-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
   #+END_SRC
** Magit
   #+BEGIN_SRC emacs-lisp
    (use-package magit
	:ensure t)

    (use-package evil-magit
	:ensure t)
   #+END_SRC
** Smex
   #+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
   #+END_SRC
** Evil
*** Aways Evil
    #+BEGIN_SRC emacs-lisp
  (setq evil-emacs-state-modes nil)
  (setq evil-insert-state-modes nil)
  (setq evil-motion-state-modes nil)
    #+END_SRC
*** PageDown/Up
    #+BEGIN_SRC emacs-lisp
    (define-key evil-normal-state-map (kbd "C-k") (lambda ()
                    (interactive)
                    (evil-scroll-up nil)))
    (define-key evil-normal-state-map (kbd "C-j") (lambda ()
                        (interactive)
                        (evil-scroll-down nil)))

    #+END_SRC
*** No insert back
    #+BEGIN_SRC emacs-lisp
(setq evil-move-cursor-back nil)
    #+END_SRC
** Org
   #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
	      :ensure t
	      :config
	      (add-hook 'org-mode-hook(lambda () (org-bullets-mode))))
   #+END_SRC
** C
   #+BEGIN_SRC emacs-lisp
  (setq c-default-style "bsd"
	    c-basic-offset 4)
   #+END_SRC
